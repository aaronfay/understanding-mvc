doctype 5
html(lang="en")
  head
    title Understanding MVC
    meta(name="description", content="A short introduction to MVC in the browser")
    meta(name="author", content="Aaron Fay")
    link(rel="stylesheet", href="css/reveal.min.css")
    link(rel="stylesheet", href="css/theme/simple.css", id="theme")
    link(rel="stylesheet", href="lib/css/github.css")
    // [if gt IE 9] <!
      <script src="lib/js/html5shiv.js"></script>
    // <![endif]

  body
    .reveal
      .slides
        section
          h3(style="margin-bottom:0px;") understanding
          h1(style="font-size:230px;") MVC
          p.fragment
            small (or maintaining your sanity while developing full-scale applications in the browser...)

        section
          h3 @aaronfay
          h5 dev manager - strathcom media
          p afay@strathcom.com
          small 
            a https://github.com/aaronfay/understanding-mvc

        section
          h3 background
          ul
            li ~15 years web dev
            li bailed! on php ~2006 for python
            li django/backend dev to 2010
            li "discovered" javascript

        //----------------------------------------------
        //- 
        //- THE PROBLEM BASEMENT SET
        //- 
        section
          section 
            h1 the problem

          section
            b (potential) employer
            q.fragment(style="display:block") So you know javascript?
            br 
            b.fragment you (or me): 
            q.fragment(style="display:block") Sure, I know some jQuery...

          section
            h2 we want this!
            img(src="img/mytube.png")

          section
            p or worse...

          section
            img(src="img/facebook.png")

          section
            p We need a jQuery Engineer...
            p.fragment
              img(src="img/jquery-engineer.png")

          section
            img(src="img/jquery.png")

          section
            img(src="img/jobs.png")

          section
            h4 (12 months later)

          section
            h1 warning
            h3 production code ahead
            small.fragment (incriminating domain names and characteristics have been removed to protect the guilty...)


        //----------------------------------------------
        //- 
        //- SERIOUS ISSUES BASEMENT SET 
        //- 
        section
          section 
            h2 We end up with some serious issues
            small.fragment (for example...)

          section 
            h3 managing state on client AND server
            pre
              code.javascript
                |  ...
                |  $('.checkthismenu').addClass('loading');
                |  progress_update('.nav_tree .page-item-2379'); 
                |  <b>$('.checkthismenu').submit(function(){</b>
                |    var theID = $(this).find('input').val();
                |    $('#checkthis-' + theID).addClass('loading');
                |    $('#checkthismenu-' + theID).addClass('loading');
                |    //$('.checkthismenu').addClass('loading');
                |    $('.checkthismenu').find('input').attr('disabled', true);
                |  ...

          section 
            h3 using the dom to determine application state
            pre
              code.javascript
                |  ...
                |  <b>if ($($nav + ' ul li').hasClass("page_parent"))</b>
                |    $($nav + ' .page_parent ul').addClass("displayMe"); 
                |  <b>if ($($nav + ' ul li').hasClass("page_ancestor"))</b>
                |    $($nav + ' .page_ancestor').parent().addClass("displayMe"); 
                |  //Hide the submenus
                |  $($nav + ' ul li ul ').hide();
                |  $($nav + ' ul li.page_item ul ').show();
                |  $($nav + ' ul li.page_item ul ').parent().addClass("opened");
                |  $('.displayMe').show();
                |  $('.displayMe').parent().addClass("opened");
                |  //Add a class to the parent li IF it has sub UL's
                |  $($nav + " ul li:has(ul)").addClass("theParent");
                |  //Da henchman
                |  $($nav + " ul li ul li:has(a)").addClass("theChild");
                |  ...

          section 
            h3 other ... gross ... things
            pre
              code.html
                |  <b>&lt;a href="#" onclick="</b>
                |  var aidObj = window.currentAction; 
                |  max = Number(aidObj.meta.action_value_max);
                |  var incr = Number(aidObj.meta.action_value_increment[0]);
                |  var aid = aidObj.id; 
                |  var current = Number(aidObj.amount());
                |  if(current+incr>max){
                |    aidObj.amount(max);
                |  }else{
                |    aidObj.on(true);
                |    aidObj.amount(current+incr);
                |  }
                |  $('#popupmodalcontent .action_value').select();
                |  return false;
                |  <b>"></b>&lt;img id="popupmodalup" src="/images/actionpanearrowup.png" width="23" height="17" title="">&lt;/a>
        section
          h1 there has to be 
          h1 a better way
          small.fragment (and there is :)

        //----------------------------------------------
        //- 
        //- WHAT IS MVC?
        //- 
        section
          h2 what is
          h1(style="font-size:230px") MVC?

        section
          p it's a "buzz word"

        section
          q that thing you should be using

        section
          q you're not a REAL developer until...

        section
          h3 Wikipedia says:
          blockquote ... a software architecture that separates the representation of information from the user's interaction with it. The model consists of application data and business rules, and the controller mediates input, converting it to commands for the model or view. A view can be any output representation of data, such as a chart or a diagram. Multiple views of the same data are possible, such as a pie chart for management and a tabular view for accountants code reusability and separation of concerns ...
        section
          p (still confused)

        section
          h4 turning to the internet, EVERYONE claims to be it
          ul
            li django
            li angular
            li spine
            li knockout
            li rails
            li catalyst
            li robotlegs
            li ...

        section 
          h1 there's more!

        section
          h3.fragment MVC
          h3.fragment MVCS
          h3.fragment MVP
          h3.fragment MVT
          h3.fragment MVVM
          h3.fragment MVW
          h3.fragment MVMS
          h3.fragment MV*
          h3.fragment ...

        section
          h2 huh?
          img(src="img/help-me.jpg")

        section
          h3 what MVC really is
          small.fragment (clearly)
          h2.fragment misunderstood

        section
          h3 it really should be called 
          h1 data state bindings
          small.fragment (or something like that)

        section
          p a simple example
          p (sans framework)

        //----------------------------------------------
        //- 
        //- EXAMPLE A
        //- 
        section
          section 
            h3 example A

          section 
            p some tabs using "ul" (a la bootstrap)
            pre
              code.html
                |  &lt;ul class="nav nav-tabs">
                |    &lt;li class="active" id="home-tab">
                |      &lt;a href="#" class="tab-button" <strong>id="home"</strong>>Home&lt;/a>
                |    &lt;/li>
                |    &lt;li id="profile-tab">
                |      &lt;a href="#" class="tab-button" <strong>id="profile"</strong>>Profile&lt;/a>
                |    &lt;/li>
                |    &lt;li id="messages-tab">
                |      &lt;a href="#" class="tab-button" <strong>id="messages"</strong>>Messages&lt;/a>
                |    &lt;/li>
                |  &lt;/ul>

          section 
            p le panels to match
            pre
              code.html
                |  &lt;div class="tab-content">
                |    &lt;div class="tab-pane active" <strong>id="home-panel"</strong>>
                |      &lt;h3>Home&lt;/h3>
                |    &lt;/div>
                |    &lt;div class="tab-pane" <strong>id="profile-panel"</strong>>
                |      &lt;h3>Profile&lt;/h3>
                |    &lt;/div>
                |    &lt;div class="tab-pane" <strong>id="messages-panel"</strong>>
                |      &lt;h3>Messages&lt;/h3>
                |    &lt;/div>
                |  &lt;/div>

          section 
            p listen for click
            //- don't ask why, have to use &lt; in the code below
            pre
              code.javascript
                | $(document).ready(function() {
                |   <strong>$('.tab-button').on('click', function(event) {</strong>
                |     /* grab the id of the item we want to activate */
                |     var id = $(event.target).attr('id');
                |     /* show the proper tab */
                |     $('.tab-button').parent('li').removeClass('active');
                |     $('#' + id + '-tab').addClass('active');
                |     /* show the proper panel*/
                |     $('.tab-pane').removeClass('active');
                |     $('#' + id + '-panel').addClass('active');
                |     return false;
                |   <strong>});</strong>
                | });

          section 
            p find id based on event
            pre
              code.javascript
                | $(document).ready(function() {
                |   $('.tab-button').on('click', function(event) {
                |     /* grab the id of the item we want to activate */
                |     <strong>var id = $(event.target).attr('id');</strong>
                |     /* show the proper tab */
                |     $('.tab-button').parent('li').removeClass('active');
                |     $('#' + id + '-tab').addClass('active');
                |     /* show the proper panel*/
                |     $('.tab-pane').removeClass('active');
                |     $('#' + id + '-panel').addClass('active');
                |     return false;
                |   })
                | });

          section 
            p use dom to retrieve and set state
            pre
              code.javascript 
                | $(document).ready(function() {
                |   $('.tab-button').on('click', function(event) {
                |     /* grab the id of the item we want to activate */
                |     var id = $(event.target).attr('id');
                |     /* show the proper tab */
                |     <strong>$('.tab-button').parent('li').removeClass('active');</strong>
                |     <strong>$('#' + id + '-tab').addClass('active');</strong>
                |     /* show the proper panel*/
                |     <strong>$('.tab-pane').removeClass('active');</strong>
                |     <strong>$('#' + id + '-panel').addClass('active');</strong>
                |     return false;
                |   })
                | });

          section 
            h3 using this approach, we have a couple problems:
            ul 
              li updating the view directly from user events
              li storing view state in the DOM
              li what state is the application in?
              li can we get directly to a part of the app (eg: refresh)?

        //----------------------------------------------
        //- 
        //- EXAMPLE B
        //- 
        section
          section 
            h2 example b

          section
            h3 this time...
            pre
              code.html
                | 
                |  &lt;script src="./js/<strong>jquery.address.js</strong>">&lt;/script>
                | 


          section
            h3 changes to our links
            pre
              code.html
                | 
                |  &lt;a href="<strong>#home</strong>" class="tab-button">Home&lt;/a>
                | 

          section
            p the new code
            pre
              code.javascript 
                |  $(document).ready(function() {
                |    /* this time, instead, we're just 
                |       going to listen for #url change */
                |    <strong>$.address.change(function(event) {</strong>
                |      /* events come out like this: "/home" */
                |      var id = String(event.value).replace('/', '');
                |      /* show the proper tab  */
                |      $('.tab-button').parent('li').removeClass('active');
                |      $('#' + id + '-tab').addClass('active');
                |      /* show the proper panel */
                |      $('.tab-pane').removeClass('active');
                |      $('#' + id + '-panel').addClass('active');
                |    <strong>});</strong> 
                |  });

          section 
            p the guts are really the same...
            pre
              code.javascript 
                |  $(document).ready(function() {
                |    /* this time, instead, we're just 
                |       going to listen for #url change */
                |    $.address.change(function(event) {
                |      /* events come out like this: "/home" */
                |      var id = String(event.value).replace('/', '');
                |      <strong>/* show the proper tab  */
                |      $('.tab-button').parent('li').removeClass('active');
                |      $('#' + id + '-tab').addClass('active');
                |      /* show the proper panel */
                |      $('.tab-pane').removeClass('active');
                |      $('#' + id + '-panel').addClass('active');</strong> 
                |    });
                |  });

          section
            h2 so what's the difference?
            h3.fragment we actually have a <strong>model</strong>
            pre.fragment
              code
                |  
                |  /example-b/<strong>#home</strong>
                |  

          section
            h2 model
            .fragment 
              p &darr; 
              h2 controller
            .fragment
              p &darr;
              h2 view

          section
            h2 (model) #hashtag 
            .fragment 
              p &darr; 
              h2 (controller) browser/history 
            .fragment
              p &darr;
              h2 (view) html 

          section
            p so when we want to update the view, 
            h2.fragment we update the <strong>model</strong>
            p.fragment and we <strong>bind</strong> the view to the model state
            pre.fragment
              code.javascript 
                |  $(document).ready(function() {
                |    /* this time, instead, we're just 
                |       going to listen for #url change */
                |    <strong>$.address.change(function(event) {</strong>
                |      /* events come out like this: "/home" */
                |      var id = String(event.value).replace('/', '');
                |      /* show the proper tab  */
                |      $('.tab-button').parent('li').removeClass('active');
                |      $('#' + id + '-tab').addClass('active');
                |      /* show the proper panel */
                |      $('.tab-pane').removeClass('active');
                |      $('#' + id + '-panel').addClass('active');
                |    <strong>});</strong> 
                |  });

          section
            p so <strong>NOW</strong> it doesn't matter how we update the model 
            small (deep link or click), 
            br 
            h3.fragment the view(s) update automatically...
            .fragment 
              p this is <strong>REALLY COOL</strong> because the parts of our app
              h2 no longer care about each other...

          section
            p seems trivial in a simple application, but as your application becomes more and more complex, this starts to get 
            h2 really important

          section
            h1 data state bindings
            small.fragment (TM)

        section
          section 
            h2 some fun...
            h1 knockout.js

          section
            h2
              a(href="http://knockoutjs.org") http://knockoutjs.org

          section 
            h1 MVVM
            p.fragment MODEL VIEW VIEWMODEL 

          section
            h2 observables
            pre
              code.javascript
                | var viewModel = {
                |   firstName = <b>ko.observable('John')</b>,
                |   lastName = <b>ko.observable('Smith')</b>
                | };
                | ko.applyBindings(viewModel);

          section
            h2 declarative bindings
            pre
              code.html
                |  &lt;ul>
                |    &lt;li <b>data-bind="text: firstName"</b>>&lt;/li>
                |    &lt;li <b>data-bind="text: lastName"</b>>&lt;/li>
                |  &lt;/ul>
            p.fragment cool thing is, that's all you need

          section 
            h3 dead simple event handling
            pre
              code.html
                | &lt;button <b>data-bind="click: doSomething"</b>>Press me&lt;/button>

            pre
              code.javascript
                | viewModel.doSomething = function () {
                |   // <b>scope here is viewModel</b>
                |   console.log(this.firstName()); // John
                | }

          section
            h3 nested observables, computed bindings
            pre
              code.javascript
                | function Person(dat) {
                |   this.firstName = <b>ko.observable(dat.firstName);</b>
                |   this.lastName = <b>ko.observable(dat.lastName);</b>
                |   this.staff = <b>ko.observable(dat.staff || false);</b>
                |   // computed
                |   <b>this.fullName = ko.computed(function () {
                |     return this.firstName() + ' ' + this.lastName();
                |   }, this);</b>
                | }


          section
            h3 observable arrays
            pre
              code.javascript
                | viewModel = {
                |   people = <b>ko.observableArray</b>([
                |     new Person({firstName: 'John', lastName: 'Smith'}),
                |     new Person({firstName: 'Sue', lastName: 'Queue', staff: true})
                |   ])
                | };
                | ko.applyBindings(viewModel);

          section
            h3 templates
            pre
              code.html
                | &lt;div data-bind="<b>foreach: people</b>">
                |   &lt;h2 data-bind="<b>text: fullName</b>">&lt;/h2>
                |   &lt;div data-bind="<b>if: staff</b>">
                |     &lt;a href="#" data-bind="<b>click: staffOnlyAction</b>">Click me&lt;/a>
                |   &lt;/div>
                | &lt;/div>

            pre
              code.javascript
                | function Person(dat) {
                |   ...
                |   this.staffOnlyAction = function () {
                |     /* scope is Person */
                |   }
                | }

          section
            h3 detached templates
            pre
              code.html
                | &lt;div data-bind="template: {name: myTemplate, foreach: people}">
                | &lt;/div>

            pre
              code.html
                | &lt;script type="text/html" id="myTemplate">
                |  &lt;-- template content here -->
                | &lt;/script>

          section
            h2 lots of other features
            a(href="http://knockoutjs.com") http://knockoutjs.com/


        section
          section 
            h1 so...
            h4 let's wire this in

          section 
            h3 the viewModel
            pre
              code.javascript
                |  $(document).ready(function() {
                |    
                |    /* the viewModel */
                |    <b>var viewModel = {
                |      tabState: ko.observable('/home')
                |    }
                |    ko.applyBindings(viewModel);</b>
                | 
                |    /* listen for #url change */
                |    $.address.change(function(event) { 
                |      var id = String(event.value);
                |      <b>viewModel.tabState(id);</b>
                |    }); 
                |    
                |  });

          section 
            h3 the bindings
            pre
              code.html
                |  &lt;ul class="nav nav-tabs">
                |    &lt;li <b>data-bind="css: {active: tabState() == '/home'}"</b>>
                |      &lt;a href="#home">Home&lt;/a>
                |    &lt;/li>
                |    &lt;li <b>data-bind="css: {active: tabState() == '/profile'}"</b>>
                |      &lt;a href="#profile">Profile&lt;/a>
                |    &lt;/li>
                |    &lt;li <b>data-bind="css: {active: tabState() == '/messages'}"</b>>
                |      &lt;a href="#messages">Messages&lt;/a>
                |    &lt;/li>
                |  &lt;/ul>

          section 
            h3 the bindings
            pre
              code.html
                |  &ltdiv class="tab-content">
                |    &ltdiv class="tab-pane" 
                |         <b>data-bind="css: {active: tabState() == '/home'}"</b>>
                |    ...&lt/div>
                |    &ltdiv class="tab-pane" 
                |         <b>data-bind="css: {active: tabState() == '/profile'}"</b>>
                |    ...&lt/div>
                |    &ltdiv class="tab-pane" 
                |         <b>data-bind="css: {active: tabState() == '/messages'}"</b>>
                |    ...&lt/div>
                |  &lt/div>

        section
          section
            h1 some thoughts

          section
            p the app doesn't have to be 
            h1(style="font-size:200px") huge
            p to use a framework
            p and you'll add more later anyway

          section
            h3 just because you use it ...
            ul
              li.fragment doesn't mean you're writing good code
              li.fragment doesn't mean you're writing modular code
              li.fragment doesn't mean you're writing testable code
              li.fragment it's going to get messy (use require/grunt)

        section
          h3 don't just do what I tell you
          h1 
            a(href="http://addyosmani.github.com/todomvc/") todomvc
          p (choose your own adventure...)


        section
          h2 (fin)

    script(src="lib/js/head.min.js")
    script(src="js/reveal.min.js")
    script(type="text/javascript")
      // Full list of configuration options available here:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
        controls: true,
        progress: true,
        history: true,
        center: true,

        theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
        transition: Reveal.getQueryHash().transition || 'default', // default/cube/page/concave/zoom/linear/none

        // Optional libraries used to extend on reveal.js
        dependencies: [
          { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
          { src: 'plugin/markdown/showdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
          { src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
          { src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
          // { src: 'plugin/remotes/remotes.js', async: true, condition: function() { return !!document.body.classList; } }
        ]
      });